{"version":3,"sources":["components/App.jsx","actions/index.js","constants.js","reducers/index.js","index.js"],"names":["App","props","state","text","dueDate","console","log","this","addReminder","id","deleteReminder","reminders","className","map","reminder","key","moment","Date","fromNow","onClick","placeholder","onChange","event","setState","target","value","type","renderReminders","clearReminders","Component","connect","action","Math","random","removeById","filter","read_cookie","bake_cookie","store","createStore","reducer","ReactDOM","render","document","getElementById"],"mappings":"4QAKMA,E,kDACL,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IACDC,MAAQ,CACXC,KAAM,IACNC,QAAS,KAJK,E,0DAShBC,QAAQC,IAAI,qBAAsBC,KAAKL,MAAME,SAC7CG,KAAKN,MAAMO,YAAYD,KAAKL,MAAMC,KAAMI,KAAKL,MAAME,W,qCAGtCK,GACbF,KAAKN,MAAMS,eAAeD,K,wCAGT,IAAD,OACRE,EAAcJ,KAAKN,MAAnBU,UACR,OACE,wBAAIC,UAAU,uBAEND,EAAUE,KAAI,SAAAC,GACZ,OACE,wBAAIC,IAAKD,EAASL,GAAIG,UAAU,mBAC7B,yBAAKA,UAAU,aACf,6BAAME,EAASX,MACf,6BAAK,4BAAKa,IAAO,IAAIC,KAAKH,EAASV,UAAUc,aAE7C,yBAAKN,UAAU,0BACbO,QAAS,kBAAM,EAAKT,eAAeI,EAASL,MAD9C,iB,+BAaR,IAAD,OACP,OACG,yBAAKG,UAAU,OACf,yBAAKA,UAAU,SAAf,gBAGD,yBAAKA,UAAU,6BACf,yBAAKA,UAAU,cAChB,2BACCA,UAAU,eACVQ,YAAY,cACZC,SAAU,SAAAC,GAAK,OAAI,EAAKC,SAAS,CAAEpB,KAAMmB,EAAME,OAAOC,WAEtD,2BACAb,UAAU,eACVc,KAAK,iBACLL,SAAU,SAAAC,GAAK,OAAI,EAAKC,SAAS,CAAEnB,QAASkB,EAAME,OAAOC,YAGzD,4BACAC,KAAK,SACLd,UAAU,kBACVO,QAAS,kBAAM,EAAKX,gBAHpB,iBAOED,KAAKoB,kBACP,yBACAf,UAAU,iBACVO,QAAS,kBAAM,EAAKlB,MAAM2B,mBAF1B,wB,GAtEYC,aAuFHC,mBANf,SAAyB5B,GACzB,MAAO,CACLS,UAAWT,KAI4B,CAAEM,YC1FhB,SAACL,EAAMC,GAChC,IAAM2B,EAAS,CACfL,KCJ0B,eDK1BvB,OACAC,WAGF,OADAC,QAAQC,IAAI,wBAAyByB,GAC9BA,GDmFiDrB,eChF1B,SAACD,GAC9B,IAAMsB,EAAS,CACdL,KCb6B,kBDc7BjB,MAGD,OADAJ,QAAQC,IAAI,qBAAsByB,GAC3BA,GD0EgEH,eCvE1C,WAC3B,MAAO,CACLF,KCrB0B,qBF0FhBI,CAA4E9B,G,sBGzFrFc,EAAW,SAACiB,GAAY,IACvB5B,EAAkB4B,EAAlB5B,KAAMC,EAAY2B,EAAZ3B,QAEX,MAAO,CACLK,GAAIuB,KAAKC,SACT9B,OACAC,YAIE8B,EAAa,WAAsB,IAApBhC,EAAmB,uDAAX,GAAIO,EAAO,uCAChCE,EAAYT,EAAMiC,QAAO,SAAArB,GAAQ,OAAIA,EAASL,KAAOA,KAE3D,OADAJ,QAAQC,IAAI,wBAAyBQ,GAC9BH,GAwBMA,EArBG,WAAyB,IAAxBT,EAAuB,uDAAf,GAAI6B,EAAW,uCACpCpB,EAAY,KAEhB,OADAT,EAAQkC,sBAAY,aACbL,EAAOL,MACb,IDvByB,eC0BxB,OAFAf,EAAS,sBAAOT,GAAP,CAAcY,EAASiB,KACjCM,sBAAY,YAAa1B,GACjBA,EACP,ID1B2B,kBC6B1B,OAFAA,EAAYuB,EAAWhC,EAAO6B,EAAOtB,IACrC4B,sBAAY,WAAY1B,GACjBG,EACP,ID7B0B,kBCgC1B,OAFAH,EAAY,GACZ0B,sBAAY,YAAa1B,GAClBA,EACR,QACC,OAAOT,IC5BNoC,G,MAAQC,YAAYC,IAE1BC,IAASC,OACT,kBAAC,IAAD,CAAUJ,MAAOA,GACjB,kBAAC,EAAD,OAECK,SAASC,eAAe,W","file":"static/js/main.e4105319.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { addReminder, deleteReminder, clearReminders } from '../actions';\nimport moment from 'moment';\n\nclass App extends Component {\n constructor(props){\n   super(props);\n   this.state = {\n     text: ' ',\n     dueDate: ' '\n   }\n }\n\n addReminder() {\n   console.log('this.state.dueDate', this.state.dueDate);\n   this.props.addReminder(this.state.text, this.state.dueDate);\n }\n\n deleteReminder(id) {\n   this.props.deleteReminder(id);\n }\n\n renderReminders() {\n   const { reminders } = this.props;\n   return (\n     <ul className=\"list-group col-sm-4\">\n           {\n             reminders.map(reminder => {\n               return (\n                 <li key={reminder.id} className=\"list-group-item\">\n                    <div className=\"list-item\">\n                    <div>{reminder.text}</div>\n                    <div><em>{moment(new Date(reminder.dueDate)).fromNow()}</em></div>\n                    </div>\n                    <div className=\"list-item delete-button\"\n                      onClick={() => this.deleteReminder(reminder.id)}\n                    >\n                      &#x2715;\n                    </div>\n                 </li>\n               )\n             })\n           }\n     </ul>\n   )\n }\n\n  render() {\n    return (\n       <div className=\"App\">\n       <div className=\"title\">\n        Reminder Pro\n      </div>\n      <div className=\"form-inline reminder-form\">\n      <div className=\"form-group\">\n     <input\n      className=\"form-control\"\n      placeholder=\"I hav to...\"\n      onChange={event => this.setState({ text: event.target.value })}\n      />\n      <input\n      className=\"form-control\"\n      type=\"datetime-local\"\n      onChange={event => this.setState({ dueDate: event.target.value })}\n      />\n      </div>\n      <button\n      type=\"button\"\n      className=\"btn btn-success\"\n      onClick={() => this.addReminder()}>\n       Add Reminder\n       </button>\n      </div>\n      { this.renderReminders() }\n      <div\n      className=\"btn btn-danger\"\n      onClick={() => this.props.clearReminders()}\n      >\n      Clear Reminders\n       </div>\n       </div>\n    )\n  }\n}\n\nfunction mapStateToProps(state) {\nreturn {\n  reminders: state\n}\n}\n\nexport default connect(mapStateToProps,  { addReminder, deleteReminder, clearReminders }) (App);\n","import { ADD_REMINDER, DELETE_REMINDER, CLEAR_REMINDERS } from '../constants';\n\nexport const addReminder = (text, dueDate) => {\n  const action = {\n  type: ADD_REMINDER,\n  text,\n  dueDate\n}\nconsole.log('action in addReminder', action);\nreturn action;\n}\n\nexport const deleteReminder = (id) => {\n const action = {\n  type: DELETE_REMINDER,\n  id\n }\n console.log('deleting an action', action);\n return action;\n}\n\nexport const clearReminders = () => {\n   return {\n     type: CLEAR_REMINDERS\n   }\n}\n","export const ADD_REMINDER = 'ADD_REMINDER';\nexport const DELETE_REMINDER = 'DELETE_REMINDER';\nexport const CLEAR_REMINDERS = 'CLEAR_REMINDERS';\n","import { ADD_REMINDER, DELETE_REMINDER, CLEAR_REMINDERS } from '../constants';\nimport { bake_cookie, read_cookie } from 'sfcookies';\n\nconst reminder = (action) => {\n let { text, dueDate } = action;\n\n  return {\n    id: Math.random(),\n    text,\n    dueDate\n  }\n}\n\nconst removeById = ( state = [], id) => {\n  const reminders = state.filter(reminder => reminder.id !== id);\n  console.log('new reduced reminders', reminder);\n  return reminders;\n}\n\nconst reminders = (state = [], action) => {\n  let reminders = null;\n  state = read_cookie('reminders');\n  switch(action.type) {\n   case ADD_REMINDER:\n    reminders = [...state, reminder(action)];\n   bake_cookie('reminders', reminders);\n    return reminders;\n    case DELETE_REMINDER:\n     reminders = removeById(state, action.id);\n     bake_cookie('reminder', reminders);\n     return reminder;\n     case CLEAR_REMINDERS:\n     reminders = [];\n     bake_cookie('reminders', reminders);\n     return reminders;\n    default:\n     return state;\n  }\n}\n\nexport default reminders;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport reducer from './reducers';\nimport './index.css';\n\nconst store = createStore(reducer);\n\nReactDOM.render(\n<Provider store={store}>\n<App />\n</Provider>,\n document.getElementById('root')\n)\n"],"sourceRoot":""}